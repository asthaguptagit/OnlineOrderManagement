SECRET_KEY= secrets.token_hex(16)
DATABASE_URL=postgresql://username:password@localhost:5432/user_management
#JWT_SECRET_KEY = "your-secret-key"
JWT_SECRET_KEY = secrets.token_hex(16)  # Secret key for JWT
JWT_ACCESS_TOKEN_EXPIRES = timedelta(minutes=15)  # Access token expiry
JWT_REFRESH_TOKEN_EXPIRES = timedelta(days=7)

'''
Why JWT_SECRET_KEY is Required
Signing and Encryption:

When we generate a JWT, such as an access token (create_access_token(identity=current_user)), it is signed using the JWT_SECRET_KEY.
The JWT_SECRET_KEY is used to create a cryptographic signature on the JWT, ensuring that the token has not been tampered with during transmission.
This signature allows the server to verify the authenticity and integrity of the token by checking if it matches the expected secret key.
Token Validation:

On the server-side, after the client sends the token back (e.g., in the Authorization header), the server will use the same JWT_SECRET_KEY to decode and validate the token.
If the token is tampered with or if the wrong key is used, validation will fail.
Confidentiality:

Although the token itself can be sent over insecure channels, the cryptographic signature ensures that the data within the token is verified and has not been altered.
Process in Detail:
Client Requests:
The client sends a request with an access token in the Authorization header.
Server Verification:
The server uses the JWT_SECRET_KEY to decode and validate the token.
If the signature matches and the token is valid (i.e., not expired and correctly signed), the request is authenticated.
Summary:
JWT_SECRET_KEY is used to sign the JWT tokens.
It ensures that the tokens sent by clients are valid, unaltered, and have not expired.
Without JWT_SECRET_KEY, the server cannot properly verify the authenticity of the JWTs it receives.
'''
